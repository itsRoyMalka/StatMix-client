[{"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/index.js":"1","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/App.js":"2","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/state/store.js":"3","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/context/UserContext.js":"4","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/state/MessageSlice.js":"5","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/auth/Auth.jsx":"6","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/public/Event.jsx":"7","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/notFound/NotFound.jsx":"8","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/profile/Profile.jsx":"9","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashboardLayout.jsx":"10","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Home.jsx":"11","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/signout/Signout.jsx":"12","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/statistics/Statistics.jsx":"13","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/EventsPage.jsx":"14","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/GenresPage.jsx":"15","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/live/Live.jsx":"16","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/live/LiveRedirect.jsx":"17","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashMobileNav.jsx":"18","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashSideNav.jsx":"19","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Main.jsx":"20","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Aside.jsx":"21","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/SideOverlay.jsx":"22","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashTopbar.jsx":"23","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/Calendar.jsx":"24","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/SideOverlay.jsx":"25","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/modals/Message.jsx":"26","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/buttons/Dropdown.jsx":"27","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/widgets/Spinner.jsx":"28","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/charts/PieColumnChart.jsx":"29","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/AddGenreForm.jsx":"30","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/AddEventForm.jsx":"31","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/buttons/Toggle.jsx":"32"},{"size":581,"mtime":1686329164542,"results":"33","hashOfConfig":"34"},{"size":2317,"mtime":1686329164552,"results":"35","hashOfConfig":"34"},{"size":211,"mtime":1686329164533,"results":"36","hashOfConfig":"34"},{"size":935,"mtime":1686322154062,"results":"37","hashOfConfig":"34"},{"size":649,"mtime":1686246532518,"results":"38","hashOfConfig":"34"},{"size":10070,"mtime":1686325500845,"results":"39","hashOfConfig":"34"},{"size":9378,"mtime":1686317964856,"results":"40","hashOfConfig":"34"},{"size":1255,"mtime":1686318829536,"results":"41","hashOfConfig":"34"},{"size":106,"mtime":1685785042407,"results":"42","hashOfConfig":"34"},{"size":3447,"mtime":1686325748408,"results":"43","hashOfConfig":"34"},{"size":204,"mtime":1685727751993,"results":"44","hashOfConfig":"34"},{"size":717,"mtime":1686325624177,"results":"45","hashOfConfig":"34"},{"size":112,"mtime":1685740882553,"results":"46","hashOfConfig":"34"},{"size":1322,"mtime":1686313192989,"results":"47","hashOfConfig":"34"},{"size":8944,"mtime":1686244832716,"results":"48","hashOfConfig":"34"},{"size":6114,"mtime":1686318015917,"results":"49","hashOfConfig":"34"},{"size":9776,"mtime":1686318458866,"results":"50","hashOfConfig":"34"},{"size":5501,"mtime":1686304934169,"results":"51","hashOfConfig":"34"},{"size":1782,"mtime":1686304875939,"results":"52","hashOfConfig":"34"},{"size":318,"mtime":1685727751984,"results":"53","hashOfConfig":"34"},{"size":220,"mtime":1685738827851,"results":"54","hashOfConfig":"34"},{"size":4321,"mtime":1685999845712,"results":"55","hashOfConfig":"34"},{"size":5736,"mtime":1686323103800,"results":"56","hashOfConfig":"34"},{"size":18963,"mtime":1686316329456,"results":"57","hashOfConfig":"34"},{"size":4316,"mtime":1686232122032,"results":"58","hashOfConfig":"34"},{"size":4670,"mtime":1686248478844,"results":"59","hashOfConfig":"34"},{"size":2277,"mtime":1686230246496,"results":"60","hashOfConfig":"34"},{"size":1584,"mtime":1686079404649,"results":"61","hashOfConfig":"34"},{"size":444,"mtime":1686307170322,"results":"62","hashOfConfig":"34"},{"size":9134,"mtime":1686253946318,"results":"63","hashOfConfig":"34"},{"size":12961,"mtime":1686316531159,"results":"64","hashOfConfig":"34"},{"size":1449,"mtime":1686236345136,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8biv2l",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/index.js",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/App.js",["177"],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/state/store.js",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/context/UserContext.js",["178","179"],[],"import {createContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {useCookies} from \"react-cookie\";\n\naxios.defaults.baseURL = \"http://10.0.0.8:3001\";\naxios.defaults.withCredentials = true;\n\nexport const UserContext = createContext({});\n\nexport function UserContextProvider({children}) {\n    const [user,setUser] = useState(null);\n    const [ready,setReady] = useState(false);\n    const [cookies, setCookie] = useCookies();\n\n    useEffect(() => {\n\n\n        if (cookies.token && !user) {\n            axios.get('/api/user/get-user')\n                .then(({data}) => {\n                    setUser(data);\n                    setReady(true);\n                }).catch(err=>{\n                setUser(null)\n                setReady(false)\n            });\n        }\n    }, []);\n\n\n\n\n    return (\n        <UserContext.Provider value={{user,setUser,ready}}>\n            {children}\n        </UserContext.Provider>\n    );\n}","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/state/MessageSlice.js",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/auth/Auth.jsx",["180","181","182","183","184"],[],"import React, {useContext, useEffect, useState} from 'react'\n\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport axios from \"axios\";\nimport {useCookies} from \"react-cookie\";\nimport {UserContext, UserContextProvider} from \"../../context/UserContext\";\nimport {setMessageOpen, setMessageTitle, setMessageType} from \"../../state/MessageSlice\";\nimport {Message} from \"../../components/modals/Message\";\n\nexport const Auth = ({type}) => {\n\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [imageUrl, setImageUrl] = useState('')\n    const [cookies, setCookie] = useCookies();\n    const {user, setUser} = useContext(UserContext)\n    const isMessageOpen = useSelector(state=> state.message.open)\n\n\n    const setNotification = async (typeN, title) =>{\n\n        await dispatch(setMessageType(typeN))\n        await dispatch(setMessageTitle(title))\n        await dispatch(setMessageOpen(true, true))\n\n    }\n\n    if(user){\n        navigate('/dashboard')\n\n    }\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n\n        //type true - log in\n        if (type) {\n            if (email.length !== 0 && password.length !== 0) {\n                await axios.post('/api/auth/login', {email, password})\n                    .then(res => {\n\n                        setUser(res.data)\n                        setNotification(true, \"Logged in successfully\")\n                        setTimeout(() => {\n                            navigate('/dashboard')\n                        }, 1000)\n\n                    })\n                    .catch(error => {\n                        console.log(error)\n                        setNotification(false, `${error.message}`)\n\n                    })\n\n            } else {\n                await setNotification(false, \"Invalid input\")\n            }\n\n        }\n\n\n                //sign up\n             else {\n\n\n\n                if (email.length !== 0 && password.length !== 0 && firstName.length !== 0 && lastName.length !== 0) {\n                    await axios.post('/api/auth/signup', {firstName, lastName, email, password, imageUrl})\n                        .then(res => {\n                            setNotification(true, \"Signed up successfully\")\n                            setTimeout(() => {\n                                navigate('/login')\n                            }, 1000)\n                        })\n                        .catch(error => {\n                            console.log(error)\n                            setNotification(false, `${error.message}`)\n                        })\n\n\n                }else {\n                    await setNotification(false, \"Invalid input\")\n\n                }\n            }\n        }\n\n\n\n\n\n    return (\n        <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\n\n            {isMessageOpen &&\n                <Message />\n            }\n\n            <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\n                <img\n                    className=\"mx-auto h-10 w-auto\"\n                    src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600\"\n                    alt=\"Your Company\"\n                />\n                <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\n                    {type?\n                        (\n                           'Log in to your account'\n                        )\n                        : (\n                            'Sign up your account'\n                        )}\n                </h2>\n            </div>\n\n            <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\n                <form className=\"space-y-6\" action=\"#\" method=\"POST\">\n\n                    {!type &&\n                    <>\n                        <div>\n                            <label htmlFor=\"text\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                First Name\n                            </label>\n                            <div className=\"mt-2\">\n                                <input\n                                    onChange={(e)=>setFirstName(e.target.value)}\n                                    id=\"firstName\"\n                                    name=\"firstName\"\n                                    type=\"text\"\n                                    autoComplete=\"text\"\n                                    required\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                                />\n                            </div>\n                        </div>\n                        <div>\n                            <label htmlFor=\"text\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Last Name\n                            </label>\n                            <div className=\"mt-2\">\n                                <input\n                                    onChange={(e)=>setLastName(e.target.value)}\n                                    id=\"lastName\"\n                                    name=\"lastName\"\n                                    type=\"text\"\n                                    autoComplete=\"text\"\n                                    required\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                                />\n                            </div>\n                        </div>\n                    </>\n\n\n                    }\n\n                    <div>\n                        <label htmlFor=\"email\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                            Email address\n                        </label>\n                        <div className=\"mt-2\">\n                            <input\n                                onChange={(e)=>setEmail(e.target.value)}\n                                id=\"email\"\n                                name=\"email\"\n                                type=\"email\"\n                                autoComplete=\"email\"\n                                required\n                                className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                            />\n                        </div>\n                    </div>\n\n                    <div>\n                        <div className=\"flex items-center justify-between\">\n                            <label htmlFor=\"password\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Password\n                            </label>\n                            {type &&\n                                <div className=\"text-sm\">\n                                    <a href=\"/forgot-password\" className=\"font-semibold text-sky-400 hover:text-sky-500\">\n                                        Forgot password?\n                                    </a>\n                                </div>\n                            }\n\n                        </div>\n                        <div className=\"mt-2\">\n                            <input\n                                onChange={(e)=>setPassword(e.target.value)}\n                                id=\"password\"\n                                name=\"password\"\n                                type=\"password\"\n                                autoComplete=\"current-password\"\n                                required\n                                className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                            />\n                        </div>\n                    </div>\n\n                    <div>\n                        <button\n                            onClick={(e)=>handleSubmit(e)}\n                            type=\"submit\"\n                            className=\"flex w-full justify-center rounded-md bg-sky-400 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                        >\n                            {type?\n                                (\n                                  'Sign in'\n                                )\n                                :(\n                                    'Sign up'\n                                )}\n\n                        </button>\n                    </div>\n                </form>\n\n                {type?\n                    (\n                        <p className=\"mt-10 text-center text-sm text-gray-500\">\n                            Not a member?{' '}\n                            <a href=\"/signup\" className=\"font-semibold leading-6 text-sky-400 hover:text-sky-400\">\n                                Sign up now\n                            </a>\n                        </p>\n                    )\n                    : (\n                        <p className=\"mt-10 text-center text-sm text-gray-500\">\n                            Already a member?{' '}\n                            <a href=\"/login\" className=\"font-semibold leading-6 text-sky-400 hover:text-sky-400\">\n                                Log in now\n                            </a>\n                        </p>\n                    )\n                }\n\n            </div>\n        </div>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/public/Event.jsx",["185","186","187","188","189","190","191"],[],"/* This example requires Tailwind CSS v2.0+ */\nimport React, {Fragment, useEffect, useState} from 'react'\nimport { Disclosure, Menu, Transition } from '@headlessui/react'\nimport axios from \"axios\";\nimport {useParams} from \"react-router-dom\";\nimport {useCookies} from \"react-cookie\";\n\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport const Event = () => {\n\n    const [event, setEvent] = useState({})\n    const [pickedGenres, setPickedGenres] = useState([])\n    const [isActive, setIsActive] = useState(false)\n    const [cookies, setCookie] = useCookies();\n    const {eventId} = useParams()\n\n\n\n    const getEvent = () =>{\n\n        axios.get(`/api/public/get-event/${eventId}`)\n            .then(res=>{\n\n\n                setEvent(res.data)\n                setIsActive(res.data.isActive)\n\n            })\n            .catch(error=>{\n                console.log(error)\n\n            })\n\n    }\n\n    const handlePick = (genre) =>{\n\n        if(pickedGenres.includes(genre.name)){\n            const arr = pickedGenres.filter(gen => gen !== genre.name)\n            setPickedGenres(arr)\n        }else{\n            setPickedGenres([...pickedGenres, genre.name])\n        }\n\n    }\n\n    const handleSubmit = () =>{\n\n        axios.post(`/api/public/post-event/${eventId}`,pickedGenres)\n            .then(res=>{\n\n                window.location.reload(false);\n                console.log(res)\n            })\n            .catch(error=>{\n                console.log(error)\n            })\n\n    }\n\n    useEffect(()=>{\n        getEvent()\n    },[])\n\n\n\n    return (\n\n        <>\n            <div className=\"min-h-full\">\n                <div className=\"bg-white border-b border-gray-200 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                    <div className=\"flex justify-between h-16\">\n                        <div className=\"flex\">\n                            <div className=\"flex-shrink-0 flex items-center\">\n                                <img\n                                    className=\" h-8 w-auto\"\n                                    src=\"https://tailwindui.com/img/logos/workflow-logo-indigo-600-mark-gray-800-text.svg\"\n                                    alt=\"Workflow\"\n                                />\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            {isActive ?\n                (\n\n\n                        <div className=\"py-10\">\n\n                            <main>\n                                <div className=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">\n                                    {/* Replace with your content */}\n\n\n                                    {(cookies.vote === eventId)?\n                                        (\n                                            <h2 className=\"text-center text-3xl font-extrabold tracking-tight sm:text-4xl\">Thanks for your vote</h2>\n                                        ):\n                                        (\n                                            <>\n                                                <div className=\" px-4 py-8 sm:px-0\">\n                                                    <div className=\"space-y-8 sm:space-y-12\">\n                                                        <div className=\"space-y-5 sm:mx-auto sm:max-w-xl sm:space-y-4 lg:max-w-5xl\">\n                                                            <h2 className=\"text-center text-3xl font-extrabold tracking-tight sm:text-4xl\">{event.name}</h2>\n                                                            <div className=\" flex justify-center gap-3\">\n                                                                <p className=\"text-xl text-gray-500\">\n                                                                    {event?.date?.slice(0,10)}\n                                                                </p>\n                                                                <p className=\"text-xl text-gray-500\">\n                                                                    {event.location}\n                                                                </p>\n\n                                                            </div>\n                                                            <p className=\"text-center text-xl text-gray-500\">\n                                                                {event.description}\n                                                            </p>\n                                                            <p className=\"text-center text-2xl text-gray-900\">\n                                                                Pick you favorite genres\n                                                            </p>\n\n\n                                                        </div>\n                                                        <ul\n                                                            role=\"list\"\n                                                            className=\"mx-auto grid grid-cols-2  gap-x-4 gap-y-8 sm:grid-cols-4 md:gap-x-6 lg:max-w-5xl lg:gap-x-8 lg:gap-y-12 xl:grid-cols-6\"\n                                                        >\n                                                            {event?.genres?.map((genre) => (\n                                                                <a key={genre.name} onClick={()=>handlePick(genre)} className={classNames\n                                                                (pickedGenres.includes(genre.name)?('bg-sky-100 border border-gray-100 '):('border border-gray-100 '), \"rounded-2xl cursor-pointer\" )}>\n                                                                    <li key={genre.name}>\n                                                                        <div className=\"space-y-4\">\n                                                                            <img className=\"mt-2 mx-auto h-24 w-24 rounded-2xl lg:w-24 lg:h-24 \" src={genre.imageUrl} alt=\"\" />\n                                                                            <div className=\"space-y-2\">\n                                                                                <div className=\"text-center text-xs font-medium lg:text-sm\">\n                                                                                    <h3>{genre.name}</h3>\n                                                                                    {pickedGenres.includes(genre.name) ? (\n                                                                                        <span className=\"inline-flex items-center rounded-md bg-sky-50 px-2 py-1 text-xs font-medium text-sky-400 ring-1 ring-inset ring-sky-400/10\">\n                                                                                                Picked\n                                                                                                </span>\n\n                                                                                    ) :(\n                                                                                        <span className=\"inline-flex items-center rounded-md bg-white px-2 py-2 text-xs font-medium text-white ring-1 ring-inset ring-white\">\n\n                                                                                            </span>\n                                                                                    )\n\n                                                                                    }\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                    </li>\n                                                                </a>\n                                                            ))}\n                                                        </ul>\n                                                    </div>\n                                                </div>\n                                                <div className=\"mt-6 flex items-center justify-center gap-x-6 sm:px-5\">\n                                                    <button\n                                                        onClick={()=>handleSubmit()}\n                                                        type=\"submit\"\n                                                        className=\"rounded-md w-64 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                                                    >\n                                                        Submit you picks\n                                                    </button>\n                                                </div>\n                                            </>\n                                        )}\n\n\n                                </div>\n                            </main>\n\n\n\n\n                    </div>\n                ):\n                    (\n                        <h2 className=\"text-center text-3xl font-extrabold tracking-tight sm:text-4xl\">Event is not active yet</h2>\n\n                    )}\n\n\n            </div>\n\n        </>\n\n\n\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/notFound/NotFound.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/profile/Profile.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashboardLayout.jsx",["192","193","194","195","196","197","198"],[],"import React, {Fragment, useContext, useEffect, useState} from 'react'\nimport {CogIcon, HomeIcon, CalendarDaysIcon, PresentationChartBarIcon, UsersIcon, WifiIcon} from \"@heroicons/react/24/outline\";\nimport {MagnifyingGlassIcon} from \"@heroicons/react/24/solid\";\nimport {Menu, Transition} from \"@headlessui/react\";\nimport {DashSideNav} from \"./DashSideNav\";\nimport {DashMobileNav} from \"./DashMobileNav\";\nimport {DashTopbar} from \"./DashTopbar\";\nimport {Outlet, useNavigate} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {Message} from \"../../../components/modals/Message\";\nimport {useCookies} from \"react-cookie\";\nimport axios from \"axios\";\nimport {CircleStackIcon} from \"@heroicons/react/20/solid\";\nimport {UserContext} from \"../../../context/UserContext\";\n\n\nconst path = window.location.pathname\n\n\nconst sidebarNavigation = [\n    { name: 'Home', href: '/dashboard', icon: HomeIcon, current: path === '/dashboard' },\n    { name: 'Live', href: '/dashboard/live', icon: WifiIcon, current: path === '/dashboard/live/:eventId' },\n    { name: 'Events', href: '/dashboard/events', icon: CalendarDaysIcon, current:  path === '/dashboard/events' },\n    { name: 'Statistics', href: '/dashboard/statistics', icon: PresentationChartBarIcon, current:  path === '/dashboard/statistics' },\n    { name: 'Genres', href: '/dashboard/genres', icon: CircleStackIcon, current:  path === '/dashboard/genres' },\n    { name: 'Profile', href: '/dashboard/profile', icon: UsersIcon, current:  path === '/dashboard/profile' },\n\n]\n\nconst userNavigation = [\n    { name: 'Your Profile', href: '/dashboard/profile' },\n    { name: 'Sign out', href: '/dashboard/signout' },\n]\nconst publicUserNavigation = [\n    { name: 'Login', href: '/login' },\n    { name: 'Sign Up', href: '/signup' },\n]\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\nexport const DashboardLayout = ({children}) => {\n\n    const navigate = useNavigate()\n    const [cookies, setCookie] = useCookies();\n    const {user} = useContext(UserContext)\n   const isMessageOpen = useSelector(state=> state.message.open)\n\n\n    if(!user || !cookies.token){\n        navigate('/login')\n    }\n\n    //console.log(user)\n\n    const [mobileMenuOpen, setMobileMenuOpen] = useState(false)\n\n    return (\n\n        <>\n\n\n\n            {isMessageOpen &&\n                <Message />\n            }\n\n\n            <div className=\"h-full flex\">\n\n\n\n                <DashSideNav classNames={classNames}\n                             sidebarNavigation={sidebarNavigation}\n\n                />\n                <DashMobileNav classNames={classNames}\n                               mobileMenuOpen={mobileMenuOpen}\n                               setMobileMenuOpen={setMobileMenuOpen}\n                               sidebarNavigation={sidebarNavigation}\n                />\n\n\n\n                <div className=\"flex-1 flex flex-col overflow-hidden\">\n\n                    <DashTopbar\n                        classNames={classNames}\n                        setMobileMenuOpen={setMobileMenuOpen}\n                        userNavigation={userNavigation}\n                        publicUserNavigation={publicUserNavigation}\n                    />\n\n                    {/* Main content */}\n                    <div className=\"flex-1 flex items-stretch overflow-hidden\">\n\n                        <Outlet />\n                    </div>\n\n\n                </div>\n\n            </div>\n\n\n        </>\n\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Home.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/signout/Signout.jsx",["199","200","201"],[],"import React, {useContext, useEffect, useRef, useState} from 'react'\n\nimport {useNavigate} from \"react-router-dom\";\n\nimport axios from \"axios\";\nimport {UserContext} from \"../../../context/UserContext\";\n\nexport const Signout = () => {\n\n\n    const navigate = useNavigate()\n    const {setUser} = useContext(UserContext)\n\n    const handleSignout = async () =>{\n\n        await axios.post('/api/auth/signout')\n            .then(res=>{\n                setUser(null)\n            })\n            .catch(error=>{\n                console.log(error)\n\n            })\n\n\n    }\n\n    useEffect(()=>{\n        handleSignout().then(res=>{\n            navigate('/login')\n        })\n    },[])\n\n    return (\n        <h1>log out</h1>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/statistics/Statistics.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/EventsPage.jsx",["202","203","204","205","206"],[],"import React, {useEffect, useMemo, useState} from 'react'\n\nimport axios from \"axios\";\nimport {Calendar} from \"./Calendar\";\nimport {SideOverlay} from \"./SideOverlay\";\nimport dayjs, {Dayjs} from \"dayjs\";\n\n\n\n\n\nexport const EventsPage = () => {\n\n\n    const getEventsFromServer = async () =>{\n\n\n        const events = await axios.get('/api/user/get-user-events')\n            .catch(error=>{\n                console.log(error)\n\n            })\n\n        const eventsMap = new Map();\n\n        await events?.data?.forEach(event=> {\n\n            const day = dayjs(event?.date).date()-1\n            const month = dayjs(event?.date).month()+1\n            const key = `${day}-${month}`\n\n            const prevArray = eventsMap.get(key)\n\n            if(!prevArray){\n                eventsMap.set(key, [event])\n            }else{\n                prevArray.push(event)\n\n            }\n        })\n\n        return eventsMap\n\n    }\n\n    const events = useMemo(()=> getEventsFromServer())\n\n\n    return (\n\n        <>\n\n\n\n            <main className=\"lg:py-8 lg:px-16 px-4 flex-1 overflow-y-auto\">\n\n                <section aria-labelledby=\"primary-heading\" className=\"min-w-0 flex-1 h-full flex flex-col lg:order-last\">\n\n                        <Calendar events={events} />\n\n\n\n                </section>\n            </main>\n        </>\n\n\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/GenresPage.jsx",["207","208"],[],"import React, {useEffect, useState} from 'react'\nimport {Dropdown} from \"../../../components/buttons/Dropdown\";\nimport {SideOverlay} from \"./SideOverlay\"\nimport axios from \"axios\";\nimport {Spinner} from \"../../../components/widgets/Spinner\";\n\n/* This example requires Tailwind CSS v2.0+ */\n\n\nexport const GenresPage = () => {\n\n    const [open, setOpen] = useState(false)\n    const [formType, setFormType] = useState(true)\n    const [genre, setGenre] = useState({})\n    const [genres, setGenres] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n\n\n    useEffect(()=>{\n\n        setIsLoading(true)\n\n        axios.get('/api/user/get-user-genres')\n            .then(res=>{\n\n                setGenres(res.data)\n                setIsLoading(false)\n\n            })\n            .catch(error=>{\n                console.log(error)\n            })\n\n\n\n    },[])\n\n\n    const handleAdd = () =>{\n\n        setOpen(true)\n        setFormType(true)\n    }\n\n    const handleView = (e, gen) =>{\n\n        setGenre(gen)\n        setOpen(true)\n        setFormType(false)\n\n    }\n\n\n    return (\n\n        <>\n            <SideOverlay open={open} setOpen={setOpen} formType={formType} genre={genre}   />\n\n            <main className=\"lg:py-8 lg:px-16 px-4 flex-1 overflow-y-auto\">\n                <section aria-labelledby=\"primary-heading\" className=\"min-w-0 flex-1 h-full flex flex-col lg:order-last\">\n\n            {isLoading ?\n                (\n                    <Spinner />\n                )\n                :(\n\n\n                            <div className=\"px-4 sm:px-6 lg:px-8\">\n                                <div className=\"sm:flex sm:items-center\">\n                                    <div className=\"sm:flex-auto\">\n                                        <h1 className=\"text-xl font-semibold text-gray-900\">Genres</h1>\n                                        <p className=\"mt-2 text-sm text-gray-700\">\n                                            active genres will be displayed to your audience\n                                        </p>\n                                    </div>\n                                    <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n                                        <button\n                                            onClick={()=>handleAdd()}\n                                            type=\"button\"\n                                            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-sky-400 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 sm:w-auto\"\n                                        >\n                                            Add Genre\n                                        </button>\n                                    </div>\n                                </div>\n                                <div className=\"mt-8 flex flex-col\">\n                                    <div className=\"-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                                        <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\n                                            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n                                                <table className=\"min-w-full divide-y divide-gray-300\">\n                                                    <thead className=\"bg-gray-50\">\n                                                    <tr>\n                                                        <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                                                            Name\n                                                        </th>\n\n                                                        <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                            Status\n                                                        </th>\n                                                        <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                            Total votes\n                                                        </th>\n                                                        <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                            Options\n                                                        </th>\n\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody className=\"divide-y divide-gray-200 bg-white\">\n                                                    {genres.map((gen) => (\n                                                        <tr key={gen.name}>\n                                                            <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6\">\n                                                                <div className=\"flex items-center\">\n                                                                    <div className=\"h-10 w-10 flex-shrink-0\">\n                                                                        <img className=\"h-10 w-10 rounded-full\" src={gen.imageUrl} alt=\"\" />\n                                                                    </div>\n                                                                    <div className=\"ml-4\">\n                                                                        <div className=\"font-medium text-gray-900\">{gen.name}</div>\n                                                                        <div className=\"text-gray-500\">{gen.description}</div>\n                                                                    </div>\n                                                                </div>\n                                                            </td>\n\n\n                                                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                                {gen.isActive ?\n                                                                    (\n                                                                        <span className=\"inline-flex rounded-full bg-green-100 px-2 text-xs font-semibold leading-5 text-green-800\">\n                                        Active\n                                        </span>\n                                                                    ):\n                                                                    (\n                                                                        <span className=\"inline-flex rounded-full bg-red-100 px-2 text-xs font-semibold leading-5 text-red-800\">\n                                        Not Active\n                                        </span>\n                                                                    )}\n\n                                                            </td>\n                                                            <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6\">\n                                                                <div className=\"flex items-center\">\n                                                                    <div className=\"ml-4\">\n                                                                        <div className=\"font-medium text-gray-900\">{gen.totalVotes}</div>\n\n                                                                    </div>\n                                                                </div>\n                                                            </td>\n\n                                                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                                <a onClick={(e)=> handleView(e, gen)}\n                                                                   className=\"text-sky-400 hover:text-sky-500 cursor-pointer\">\n                                                                    Edit </a>\n\n                                                            </td>\n                                                        </tr>\n                                                    ))}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                )}\n\n                </section>\n            </main>\n\n        </>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/live/Live.jsx",["209","210","211","212"],[],"import React, {useEffect, useMemo, useState} from 'react'\nimport {PieColumnChart} from \"../../../components/charts/PieColumnChart\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {Spinner} from \"../../../components/widgets/Spinner\";\nimport {setMessageOpen, setMessageTitle, setMessageType} from \"../../../state/MessageSlice\";\nimport {useDispatch} from \"react-redux\";\n\n\n\n\nexport const Live = () => {\n\n    const [isActive, setIsActive] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n    const [chartType, setChartType] = useState('column')\n    const [title, setTitle] = useState('')\n    const {eventId} = useParams()\n\n    const dispatch = useDispatch()\n\n\n    const setNotification = async (type, title) =>{\n\n        await dispatch(setMessageType(type))\n        await dispatch(setMessageTitle(title))\n        await dispatch(setMessageOpen(true, true))\n\n    }\n\n\n\n    const optionsSet = {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light1\", // \"light1\", \"dark1\", \"dark2\"\n        title:{\n            text: \"\"\n        },\n        data: [{\n            type: chartType,\n            indexLabel: \"{label}: {y}\",\n            startAngle: -90,\n            dataPoints: [\n\n            ]\n        }]\n    }\n\n    const [options, setOptions] = useState(optionsSet)\n\n\n    useEffect(()=>{\n        setIsLoading(true)\n\n\n        axios.get(`/api/user/get-user-event/${eventId}`)\n            .then(res=>{\n\n\n                setTitle(res.data.name)\n                setIsActive(true)\n\n                options.data.at(0).dataPoints = []\n                options.data.at(0).type = chartType\n\n                res.data.genres.forEach(genre =>{\n\n                    options.data.at(0).dataPoints.push({\n                        y: genre.counter,\n                        label: (chartType === 'column'? (genre.name.slice(0,10)): (genre.name))\n                    })\n                })\n\n\n                setIsLoading(false)\n            })\n            .catch(error=>{\n                console.log(error)\n\n\n                    setIsActive(false)\n                    setIsLoading(false)\n\n\n\n            })\n\n    },[chartType] )\n\n    const handleEventStatus = ()=>{\n\n        axios.patch(`/api/user/set-event-status/${eventId}`)\n            .then(res=>{\n\n                setNotification(true, \"Status updated\")\n\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(2000))\n\n            })\n            .catch(error=>{\n                console.log(error)\n                setNotification(true, `${error.message}`)\n\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(2000))\n            })\n    }\n\n\n\n    return (\n\n\n        <main className=\"relative z-10 mt-5 lg:py-8 lg:px-16 px-4 flex-1 overflow-y-auto\">\n            <section aria-labelledby=\"primary-heading\" className=\"min-w-0 flex-1 h-full flex flex-col lg:order-last\">\n\n\n\n                {isLoading ?\n                    (\n                       <Spinner  />\n                    )\n                        : (\n\n                        isActive ?\n                                (\n                                    <div className=\"\">\n                                        <h2 className=\"text-center text-3xl font-extrabold tracking-tight sm:text-4xl\">{title}</h2>\n\n\n                                        <div className=\"px-6 py-6 flex items-center justify-center gap-x-6\">\n\n\n                                            <button\n                                                onClick={()=>setChartType('column')}\n                                                type=\"submit\"\n                                                className=\"rounded-md w-32 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                                            >\n                                                Column chart\n                                            </button>\n\n                                            <button\n                                                onClick={()=>setChartType('pie')}\n                                                type=\"submit\"\n                                                className=\"rounded-md w-32 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                                            >\n                                                Pie chart\n                                            </button>\n                                        </div>\n                                        <PieColumnChart options={options} />\n                                    </div>\n\n                                ):\n                                    (\n                                        <>\n                                            <h2 className=\"text-center text-3xl font-extrabold tracking-tight sm:text-4xl\">Event not Active</h2>\n                                            <div className=\"px-6 py-6 flex items-center justify-center gap-x-6\">\n                                            <button\n                                                onClick={()=>handleEventStatus()}\n                                                type=\"submit\"\n                                                className=\"text-center rounded-md w-32 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                                            >\n                                                Activate\n                                            </button>\n                                            </div>\n                                        </>\n\n\n                                        )\n\n\n\n                        )}\n\n\n            </section>\n        </main>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/live/LiveRedirect.jsx",["213","214","215"],[],"import React, {useEffect, useState} from 'react'\nimport axios from \"axios\";\nimport {useNavigate} from \"react-router-dom\";\nimport {setMessageOpen, setMessageTitle, setMessageType} from \"../../../state/MessageSlice\";\nimport {useDispatch} from \"react-redux\";\n\nexport const LiveRedirect = () => {\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const [events, setEvents] = useState([])\n\n\n\n    const setNotification = async (type, title) =>{\n\n        await dispatch(setMessageType(type))\n        await dispatch(setMessageTitle(title))\n        await dispatch(setMessageOpen(true, true))\n\n    }\n\n    useEffect(()=>{\n\n        axios.get('/api/user/get-live-event')\n            .then(res=>{\n\n                setEvents(res.data)\n            })\n            .catch(error=>{\n                console.log(error)\n\n            })\n\n    },[])\n\n    const handleEventStatus = (e, event)=>{\n\n        axios.patch(`/api/user/set-event-status/${event._id.toString()}`)\n            .then(res=>{\n\n                setNotification(true, \"Status updated\")\n\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(2000))\n\n            })\n            .catch(error=>{\n                console.log(error)\n                setNotification(true, `${error.message}`)\n\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(2000))\n            })\n    }\n\n    return (\n        <main className=\"lg:py-8 lg:px-16 px-4 flex-1 overflow-y-auto\">\n            <section aria-labelledby=\"primary-heading\" className=\"min-w-0 flex-1 h-full flex flex-col lg:order-last\">\n\n\n            {events?.length === 1 &&\n\n                navigate(`/dashboard/live/${events.at(0)._id.toString()}`)\n            }\n\n            {events?.length > 1 &&\n                <div className=\"px-4 sm:px-6 lg:px-8\">\n                    <div className=\"sm:flex sm:items-center\">\n                        <div className=\"sm:flex-auto\">\n                            <h1 className=\"text-xl font-semibold text-gray-900\">Live Events</h1>\n                            <p className=\"mt-2 text-sm text-gray-700\">\n                                Please choose your event\n                            </p>\n                        </div>\n\n                    </div>\n                    <div className=\"mt-8 flex flex-col\">\n                        <div className=\"-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                            <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\n                                <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n                                    <table className=\"min-w-full divide-y divide-gray-300\">\n                                        <thead className=\"bg-gray-50\">\n                                        <tr>\n                                            <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                                                Name\n                                            </th>\n\n                                            <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                Date\n                                            </th>\n                                            <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                Location\n                                            </th>\n                                            <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                Status\n                                            </th>\n                                            <th scope=\"col\" className=\" px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                                Setting\n                                            </th>\n                                            <th scope=\"col\" className=\" px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                                               Live\n                                            </th>\n\n\n                                        </tr>\n                                        </thead>\n                                        <tbody className=\"divide-y divide-gray-200 bg-white\">\n                                        {events.map((event) => (\n                                            <tr key={event.name}>\n                                                <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6\">\n                                                    <div className=\"flex items-center\">\n\n                                                        <div className=\"\">\n                                                            <div className=\"font-medium text-gray-900\">{event.name}</div>\n                                                            <div className=\"text-gray-500\">{event.description}</div>\n                                                        </div>\n                                                    </div>\n                                                </td>\n\n\n                                                <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6\">\n                                                    <div className=\"flex items-center\">\n                                                        <div className=\"\">\n                                                            <div className=\"font-medium text-gray-900\">{event.date.slice(0,10)}</div>\n\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                                <td className=\" whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6\">\n                                                    <div className=\"flex items-center\">\n                                                        <div className=\"\">\n                                                            <div className=\"font-medium text-gray-900\">{event.location}</div>\n\n                                                        </div>\n                                                    </div>\n                                                </td>\n\n                                                <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                    {event.isActive ?\n                                                        (\n                                                            <span className=\"inline-flex rounded-full bg-green-100 px-2 text-xs font-semibold leading-5 text-green-800\">\n                                        Active\n                                        </span>\n                                                        ):\n                                                        (\n                                                            <span className=\"inline-flex rounded-full bg-red-100 px-2 text-xs font-semibold leading-5 text-red-800\">\n                                        Not Active\n                                        </span>\n                                                        )}\n\n                                                </td>\n\n                                                {event.isActive ?\n\n                                                    (\n                                                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                            <a onClick={(e)=>handleEventStatus(e,event)}\n                                                               className=\"text-red-400 hover:text-red-500 cursor-pointer\">\n                                                                Turn off </a>\n\n                                                        </td>\n                                                ):\n                                                        (\n                                                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                                <a onClick={(e)=>handleEventStatus(e,event)}\n                                                                   className=\"text-green-400 hover:text-green-500 cursor-pointer\">\n                                                                    Turn on </a>\n\n                                                            </td>\n                                                            )}\n\n\n                                                <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                                    <a onClick={()=>{navigate(`/dashboard/live/${event._id.toString()}`)}}\n                                                       className=\"text-sky-400 hover:text-sky-500 cursor-pointer\">\n                                                        Go to event </a>\n\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n\n            {events?.length === 0 &&\n                <div>you have no live events</div>\n            }\n            </section>\n\n        </main>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashMobileNav.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashSideNav.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Main.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/home/Aside.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/SideOverlay.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/layout/DashTopbar.jsx",["216","217"],[],"import React, {Fragment, useContext} from 'react'\nimport {Bars3Icon, PlusSmallIcon} from \"@heroicons/react/24/outline\";\nimport {MagnifyingGlassIcon} from \"@heroicons/react/24/solid\";\nimport {Menu, Transition} from \"@headlessui/react\";\nimport {useSelector} from \"react-redux\";\nimport {UserContext} from \"../../../context/UserContext\";\n\n\n\n\nexport const DashTopbar = ({classNames, setMobileMenuOpen, userNavigation}) => {\n\n    const {user} = useContext(UserContext)\n\n\n    return (\n        <header className=\"w-full\">\n\n            <div className=\"relative z-20 flex-shrink-0 h-16 bg-white border-b border-gray-200 shadow-sm flex\">\n                <button\n                    type=\"button\"\n                    className=\"border-r border-gray-200 px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-sky-400 md:hidden\"\n                    onClick={() => setMobileMenuOpen(true)}\n                >\n                    <span className=\"sr-only\">Open sidebar</span>\n                    <Bars3Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                </button>\n\n                <div className=\"flex-1 flex justify-between px-4 sm:px-6\">\n                    <div className=\"flex-1 flex\">\n                        <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\n                            <label htmlFor=\"search-field\" className=\"sr-only\">\n                                Search all files\n                            </label>\n                            <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\n                                <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center\">\n                                    <MagnifyingGlassIcon className=\"flex-shrink-0 h-5 w-5\" aria-hidden=\"true\" />\n                                </div>\n                                <input\n                                    name=\"search-field\"\n                                    id=\"search-field\"\n                                    className=\"h-full w-full border-transparent py-2 pl-8 pr-3 text-base text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-0 focus:border-transparent focus:placeholder-gray-400\"\n                                    placeholder=\"Search\"\n                                    type=\"search\"\n                                />\n                            </div>\n                        </form>\n\n                    </div>\n\n                    <div className=\"ml-2 flex items-center space-x-4 sm:ml-6 sm:space-x-6\">\n\n                        {/* Profile dropdown */}\n                        <Menu as=\"div\" className=\"relative flex-shrink-0\">\n                            <div>\n                                <Menu.Button className=\"bg-white border border-gray-400 rounded-full flex text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-400\">\n                                    <span className=\"sr-only\">Open user menu</span>\n\n                                    <img\n                                        className=\"h-9 w-9 rounded-full\"\n                                        src={user?.imageUrl?\n                                            (\n                                                user.imageUrl\n                                            )\n                                            :\n                                            (\n                                               'https://eitrawmaterials.eu/wp-content/uploads/2016/09/person-icon.png'\n                                            )}\n                                        alt=\"\"\n                                    />\n                                </Menu.Button>\n                            </div>\n                            <Transition\n                                as={Fragment}\n                                enter=\"transition ease-out duration-100\"\n                                enterFrom=\"transform opacity-0 scale-95\"\n                                enterTo=\"transform opacity-100 scale-100\"\n                                leave=\"transition ease-in duration-75\"\n                                leaveFrom=\"transform opacity-100 scale-100\"\n                                leaveTo=\"transform opacity-0 scale-95\"\n                            >\n                                <Menu.Items className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\">\n\n                                    {userNavigation.map(item =>{\n                                                return <Menu.Item key={item.name}>\n                                                    {({ active }) => (\n                                                        <a\n                                                            href={item.href}\n                                                            className={classNames(\n                                                                active ? 'bg-gray-100' : '',\n                                                                'block px-4 py-2 text-sm text-gray-700'\n                                                            )}\n                                                        >\n                                                            {item.name}\n                                                        </a>\n                                                    )}\n                                                </Menu.Item>\n                                            })}\n\n\n\n\n                                </Menu.Items>\n                            </Transition>\n                        </Menu>\n\n\n                    </div>\n                </div>\n            </div>\n        </header>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/Calendar.jsx",["218","219","220","221","222","223"],[],"import React, {useEffect, useMemo, useRef, useState} from 'react'\nimport {\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    ClockIcon,\n} from \"@heroicons/react/24/solid\";\n\nimport dayjs from \"dayjs\";\nimport {Dropdown} from \"../../../components/buttons/Dropdown\";\nimport {SideOverlay} from \"./SideOverlay\";\nimport {Spinner} from \"../../../components/widgets/Spinner\";\n\n\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\n\nexport const Calendar = ({events}) => {\n\n\n    const [isLoading, setIsLoading] = useState(false)\n    const [selectedDay, setSelectedDay] = useState(null)\n    const [eventSelected, setEventSelected] = useState(null)\n    const [open, setOpen] = useState(false)\n    const [formType, setFormType] = useState(true)\n\n\n    const now = dayjs()\n    const dateFormat = \"MMM YYYY\";\n\n    const [currentMonth, setCurrentMonth] = useState(now)\n    const [days, setDays] = useState([])\n\n\n    const renderDays = async () =>{\n\n        const newDays = []\n\n        const dateFormat = \"YYYY-MM-DD\";\n\n        const prevMonth = currentMonth.subtract(1, \"month\")\n        const daysInPrevMonth = prevMonth.daysInMonth()\n        const nextMonth = currentMonth.add(1, \"month\")\n\n        const startOfMonth = currentMonth.startOf(\"month\").day()\n        const daysInCurrentMonth = currentMonth.daysInMonth()\n\n\n        const eventsMap = await events\n\n\n        for(let i=daysInPrevMonth-startOfMonth+1; i<=daysInPrevMonth; i++){\n\n            const day = (prevMonth.date(i).date()+1).toString()\n            const month = (currentMonth.month().toString())\n            const key = `${day}-${month}`\n\n\n\n            newDays.push({\n                date: prevMonth.date(i).format(dateFormat),\n                isCurrentMonth: false,\n                isSelected: false,\n                events: await eventsMap.get(key) || []\n            })\n        }\n\n        for(let i=1; i<=daysInCurrentMonth; i++ ){\n\n\n            const day = (currentMonth.date(i).date())\n            const month = ((currentMonth.month()+1))\n            const key = `${day}-${month}`\n\n            newDays.push({\n                date: currentMonth.date(i).format(dateFormat),\n                isCurrentMonth: true,\n                isToday: currentMonth.date(i).format(dateFormat) === now.format(dateFormat),\n                isSelected: false,\n                events: await eventsMap.get(key) || []\n            })\n        }\n\n        const daysLeft = 42 - newDays.length\n\n        for(let i=1; i<=daysLeft; i++ ){\n\n            const day = (nextMonth.date(i).date()).toString()\n\n            newDays.push({\n                date: nextMonth.date(i).format(dateFormat),\n                isCurrentMonth: false,\n                isSelected: false,\n                events:  []\n            })\n        }\n\n\n        setDays(newDays)\n\n    }\n\n\n    useEffect(()=>{\n\n        setIsLoading(true)\n        renderDays()\n            .then(res=>{\n                setIsLoading(false)\n            })\n            .catch(error=>console.log(error))\n\n    },[currentMonth])\n\n\n\n    const handleNextMonth = () =>{\n\n        const plus = currentMonth.add(1,\"month\");\n        setCurrentMonth(plus);\n    }\n\n    const handlePrevMonth = () =>{\n\n        const minus = currentMonth.subtract(1,\"month\");\n        setCurrentMonth(minus);\n    }\n\n    const handleEventSelect = (event) =>{\n\n\n        setEventSelected(event)\n\n    }\n\n    const handleDaySelect = (day) =>{\n        setSelectedDay(day)\n    }\n\n    const handleAddEvent = (e) =>{\n\n        setFormType(true)\n        setOpen(true)\n\n    }\n\n    const handleViewEvent = async (e, event)=>{\n\n        await setEventSelected(event)\n\n        setFormType(false)\n        setOpen(true)\n\n\n    }\n\n\n    return (\n\n        <>\n            <SideOverlay open={open} setOpen={setOpen} formType={formType} event={eventSelected}  />\n            {isLoading ?\n                (\n                    <Spinner />\n                )\n                :(\n                    <div className=\"lg:flex lg:h-full lg:flex-col\">\n\n\n\n                        <header className=\"relative z-10 flex items-center justify-between border-b border-gray-200 py-2 px-6 lg:flex-none\">\n                            <h1 className=\"text-lg font-semibold text-gray-900\">\n                                <time dateTime=\"2022-01\">{currentMonth.format(dateFormat)} </time>\n                            </h1>\n                            <div className=\"flex items-center\">\n                                <div className=\"flex items-center rounded-md shadow-sm md:items-stretch\">\n                                    <button\n                                        onClick={()=>handlePrevMonth()}\n                                        type=\"button\"\n                                        className=\"flex items-center justify-center rounded-l-md border border-r-0 border-gray-300 bg-white py-2 pl-3 pr-4 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:px-2 md:hover:bg-gray-50\"\n                                    >\n                                        <span className=\"sr-only\">Previous month</span>\n                                        <ChevronLeftIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                                    </button>\n                                    <button\n                                        onClick={()=>setCurrentMonth(now)}\n                                        type=\"button\"\n                                        className=\"hidden border-t border-b border-gray-300 bg-white px-3.5 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 focus:relative md:block\"\n                                    >\n                                        Today\n                                    </button>\n                                    <span className=\"relative -mx-px h-5 w-px bg-gray-300 md:hidden\" />\n                                    <button\n                                        onClick={()=>handleNextMonth()}\n                                        type=\"button\"\n                                        className=\"flex items-center justify-center rounded-r-md border border-l-0 border-gray-300 bg-white py-2 pl-4 pr-3 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:px-2 md:hover:bg-gray-50\"\n                                    >\n                                        <span className=\"sr-only\">Next month</span>\n                                        <ChevronRightIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                                    </button>\n                                </div>\n                                <div className=\"hidden md:ml-4 md:flex md:items-center\">\n\n                                    <div className=\"ml-6 h-6 w-px bg-gray-300\" />\n                                    <button\n                                        onClick={()=>handleAddEvent()}\n                                        type=\"button\"\n                                        className=\"focus:outline-none ml-6 rounded-md border border-transparent bg-sky-400 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-sky-500 focus:ring-2 focus:ring-sky-400 focus:ring-offset-2\"\n                                    >\n                                        Add event\n                                    </button>\n                                </div>\n\n                            </div>\n                        </header>\n                        <div className=\"shadow ring-1 ring-black ring-opacity-5 lg:flex lg:flex-auto lg:flex-col\">\n                            <div className=\"grid grid-cols-7 gap-px border-b border-gray-300 bg-gray-200 text-center text-xs font-semibold leading-6 text-gray-700 lg:flex-none\">\n                                <div className=\"bg-white py-2\">\n                                    S<span className=\"sr-only sm:not-sr-only\">un</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    M<span className=\"sr-only sm:not-sr-only\">on</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    T<span className=\"sr-only sm:not-sr-only\">ue</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    W<span className=\"sr-only sm:not-sr-only\">ed</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    T<span className=\"sr-only sm:not-sr-only\">hu</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    F<span className=\"sr-only sm:not-sr-only\">ri</span>\n                                </div>\n                                <div className=\"bg-white py-2\">\n                                    S<span className=\"sr-only sm:not-sr-only\">at</span>\n                                </div>\n\n                            </div>\n                            <div className=\"flex bg-gray-200 text-xs leading-6 text-gray-700 lg:flex-auto\">\n                                <div className=\"hidden w-full lg:grid lg:grid-cols-7 lg:grid-rows-6 lg:gap-px\">\n                                    {days.map((day) => (\n                                        <div\n                                            key={day.date}\n                                            className={classNames(\n                                                day.isCurrentMonth ? 'bg-white' : 'bg-gray-50 text-gray-500',\n                                                'relative py-2 px-3'\n                                            )}\n                                        >\n\n                                            <time\n                                                dateTime={day.date}\n                                                className={\n                                                    day.isToday\n                                                        ? 'flex h-6 w-6 items-center justify-center rounded-full bg-sky-400 font-semibold text-white'\n                                                        : undefined\n                                                }\n                                            >\n                                                {day.date.split('-').pop().replace(/^0/, '')}\n                                            </time>\n                                            {day.events.length > 0 && (\n                                                <ol className=\"mt-2\">\n                                                    {day.events?.slice(0, 2).map((event, eventIdx) => (\n                                                        <li key={eventIdx}>\n                                                            <a  onClick={(e)=>{\n                                                                handleEventSelect(e)\n                                                                handleViewEvent(e, event)\n                                                            }}\n                                                                className=\"group flex cursor-pointer\">\n                                                                <p className=\"flex-auto truncate font-medium text-gray-900 group-hover:text-sky-400\">\n                                                                    {event.name}\n\n\n                                                                </p>\n                                                                <time\n                                                                    dateTime={event.date}\n                                                                    className=\"ml-3 hidden flex-none text-gray-500 group-hover:text-sky-400 xl:block\"\n                                                                >\n\n                                                                    {event.date.slice(11,16)}\n                                                                </time>\n                                                            </a>\n                                                        </li>\n                                                    ))}\n                                                    <div  className='flex cursor-pointer '>\n\n                                                        <Dropdown buttons={day.events} title= {day.events?.length > 2 && <li className=\"text-gray-500 hover:text-sky-400 \">+ {day.events?.length - 2} more</li>} handler={handleViewEvent}/>\n                                                    </div>\n\n                                                </ol>\n                                            )}\n                                        </div>\n                                    ))}\n                                </div>\n\n\n\n                                {/* MOBILE */}\n\n\n                                <div className=\"isolate grid w-full grid-cols-7 grid-rows-6 gap-px lg:hidden\">\n                                    {days?.map((day) => (\n                                        <button\n                                            onClick={()=>handleDaySelect(day)}\n                                            key={day.date}\n                                            type=\"button\"\n                                            className={classNames(\n                                                day.isCurrentMonth ? 'bg-white' : 'bg-gray-50',\n                                                (day.isSelected || day.isToday) && 'font-semibold',\n                                                day.isSelected && 'text-white',\n                                                !day.isSelected && day.isToday && 'text-sky-400',\n                                                !day.isSelected && day.isCurrentMonth && !day.isToday && 'text-gray-900',\n                                                !day.isSelected && !day.isCurrentMonth && !day.isToday && 'text-gray-500',\n                                                'flex h-14 flex-col py-2 px-3 hover:bg-gray-100 focus:z-10'\n                                            )}\n                                        >\n                                            <time\n                                                dateTime={day.date}\n                                                className={classNames(\n                                                    day.isSelected && 'flex h-6 w-6 items-center justify-center rounded-full',\n                                                    day.isSelected && day.isToday && 'bg-sky-400',\n                                                    day.isSelected && !day.isToday && 'bg-gray-900',\n                                                    'ml-auto'\n                                                )}\n                                            >\n                                                {day?.date?.split('-').pop().replace(/^0/, '')}\n                                            </time>\n                                            <p className=\"sr-only\">{day?.events?.length} events</p>\n                                            {day?.events?.length > 0 && (\n                                                <div className=\"-mx-0.5 mt-auto flex flex-wrap-reverse\">\n                                                    {day?.events?.map((event) => (\n                                                        <div onClick={(e)=>{\n                                                            handleEventSelect(event)\n                                                            handleViewEvent(e, event)\n                                                        }}\n                                                             key={event.name}\n                                                             className=\"mx-0.5 mb-1 h-1.5 w-1.5 rounded-full bg-gray-400\" />\n                                                    ))}\n                                                </div>\n                                            )}\n                                        </button>\n                                    ))}\n                                </div>\n                            </div>\n\n                        </div>\n                        <div className=\"lg:hidden mt-3 flex-col items-center text-center\">\n                            <button\n                                onClick={()=>handleAddEvent()}\n                                type=\"button\"\n                                className=\"w-full focus:outline-none  rounded-md border border-transparent bg-sky-400 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-sky-500 focus:ring-2 focus:ring-sky-400 focus:ring-offset-2\"\n                            >\n                                Add event\n                            </button>\n                        </div>\n\n                        {selectedDay?.events?.length > 0 && (\n                            <div className=\"py-4 px-3 sm:px-6 lg:hidden\">\n                                <ol className=\"divide-y divide-gray-100 overflow-hidden rounded-lg bg-white text-sm shadow ring-1 ring-black ring-opacity-5\">\n                                    {selectedDay?.events?.map((event) => (\n                                        <li key={event._id} className=\"group flex p-4 pr-6 focus-within:bg-gray-50 hover:bg-gray-50\">\n                                            <div className=\"flex-auto\">\n                                                <p className=\"font-semibold text-gray-900\">{event.name}</p>\n                                                <time dateTime={event.datetime} className=\"mt-2 flex items-center text-gray-700\">\n                                                    <ClockIcon className=\"mr-2 h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n                                                    {event.date.slice(11,16)}\n                                                </time>\n                                            </div>\n                                            <a\n                                                onClick={(e)=>{\n                                                    handleEventSelect(e)\n                                                    handleViewEvent(e,event)\n                                                }}\n                                                className=\"ml-6 flex-none self-center rounded-md border border-gray-300 bg-white py-2 px-3 font-semibold text-gray-700 opacity-0 shadow-sm hover:bg-gray-50 focus:opacity-100 group-hover:opacity-100\"\n                                            >\n                                                Edit<span className=\"sr-only\">, {event.name}</span>\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ol>\n                            </div>\n                        )}\n                    </div>\n                    )}\n\n\n        </>\n\n\n\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/SideOverlay.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/modals/Message.jsx",["224","225","226"],[],"import React from 'react'\nimport {Fragment} from \"react\";\nimport {Dialog, Transition} from \"@headlessui/react\";\nimport {CheckIcon} from \"@heroicons/react/24/outline\";\nimport {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setMessageOpen} from \"../../state/MessageSlice\";\nimport {CheckCircleIcon, XCircleIcon} from \"@heroicons/react/20/solid\";\n\n\nexport const Message = () => {\n\n    const dispatch = useDispatch()\n    const state = useSelector(state=>state)\n    const open = useSelector(state=>state.message.open)\n    const type = useSelector(state=>state.message.type)\n    const title = useSelector(state=>state.message.title)\n\n\n    return (\n        <Transition.Root show={open} as={Fragment}>\n            <Dialog as=\"div\" className=\"fixed z-40 inset-0 overflow-y-auto\" onClose={()=>dispatch(setMessageOpen(true, true))}>\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n                    </Transition.Child>\n\n                    {/* This element is to trick the browser into centering the modal contents. */}\n                    <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\n            &#8203;\n          </span>\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n                        enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n                        leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n                    >\n                        <div className=\"relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6\">\n                            <div>\n                                <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full \">\n                                    {type ?\n                                        (\n                                            <CheckCircleIcon className=\"h-16 w-16 text-green-400\" aria-hidden=\"true\" />\n                                        ):\n                                            (\n                                                <XCircleIcon className=\"h-16 w-16 text-red-400\" aria-hidden=\"true\" />\n                                                )}\n\n                                </div>\n                                <div className=\"mt-3 text-center sm:mt-5\">\n                                    <Dialog.Title as=\"h3\" className=\"text-lg leading-6 font-medium text-gray-900\">\n                                        {type ? (\"Success\"): (\"Failed\")}\n                                    </Dialog.Title>\n                                    <div className=\"mt-2\">\n                                        <p className=\"text-sm text-gray-500\">\n                                            {title}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"mt-5 sm:mt-6\">\n                                <button\n                                    type=\"button\"\n                                    className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-sky-400 text-base font-medium text-white hover:bg-sky-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 sm:text-sm\"\n                                    onClick={()=>dispatch(setMessageOpen(false, false))}\n                                >\n                                    Close\n                                </button>\n                            </div>\n                        </div>\n                    </Transition.Child>\n                </div>\n            </Dialog>\n        </Transition.Root>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/buttons/Dropdown.jsx",["227","228"],[],"/* This example requires Tailwind CSS v2.0+ */\nimport { Fragment } from 'react'\nimport { Menu, Transition } from '@headlessui/react'\nimport { EllipsisVerticalIcon } from '@heroicons/react/24/solid'\n\nfunction classNames(...classes) {\n    return classes.filter(Boolean).join(' ')\n}\n\n\n\nexport const Dropdown = ({buttons, title, handler}) => {\n\n\n\n    return (\n            <Menu as=\"div\" className=\"relative z-30 inline-block text-left\">\n            <div>\n                <Menu.Button className=\"\">\n                    <span className=\"sr-only\">Open options</span>\n                    {title}\n                </Menu.Button>\n            </div>\n\n            <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n            >\n                <Menu.Items className=\"origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                    <div className=\"py-1\">\n\n                        {buttons?.map((button, idx)=>{\n                            return <Menu.Item key={idx}>\n                                {({ active }) => (\n                                    <a\n                                        key={button._id}\n                                        onClick={(e)=>handler(e,button)}\n                                        className={classNames(\n                                            active ? 'bg-gray-100 text-gray-900' : 'text-gray-700',\n                                            'flex block px-4 py-2 text-sm'\n                                        )}\n                                    >\n                                        {button.name} <p className=\"ml-16\">{button?.date?.slice(11,16)}</p>\n                                    </a>\n                                )}\n                            </Menu.Item>\n\n                        })}\n\n\n\n\n\n                    </div>\n                </Menu.Items>\n            </Transition>\n        </Menu>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/widgets/Spinner.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/charts/PieColumnChart.jsx",[],[],"/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/genres/AddGenreForm.jsx",["229","230","231","232","233","234"],[],"import React, {useEffect, useState} from 'react'\nimport { PhotoIcon, UserCircleIcon } from '@heroicons/react/24/solid'\nimport dayjs from \"dayjs\";\nimport {useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {Toggle} from \"../../../components/buttons/Toggle\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setMessageOpen, setMessageTitle, setMessageType} from \"../../../state/MessageSlice\";\n\n\n\nexport const AddGenreForm = ({setOpen, formType, genre}) => {\n\n    const dispatch = useDispatch()\n\n    const [name, setName] = useState('')\n    const [imageUrl, setImageUrl] = useState('')\n    const [description, setDescription] = useState('')\n    const [isActive, setIsActive] = useState(true)\n\n    const setNotification = async (type, title) =>{\n\n        await dispatch(setMessageType(type))\n        await dispatch(setMessageTitle(title))\n        await dispatch(setMessageOpen(true, true))\n\n\n    }\n\n    useEffect(()=>{\n\n\n        if(formType === false){\n\n            setName(genre.name)\n            setImageUrl(genre.imageUrl)\n            setDescription(genre.description)\n            setIsActive(genre.isActive)\n\n        }\n\n    },[])\n\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n\n\n        if(formType){\n\n\n            await axios.post('/api/user/add-genre',{name,imageUrl,description})\n                .then(res=>{\n                    console.log(res.status)\n                    setOpen(false)\n                    setNotification(true, \"New genre added\")\n\n                    setTimeout(()=>{\n                        window.location.reload(false);\n                        },(3000))\n\n\n                })\n                .catch(error=>{\n                    console.log(error)\n                    setOpen(false)\n                    setNotification(false, `${error.message}`)\n\n                })\n\n        }else{\n\n            await axios.patch('/api/user/edit-genre',{prevName: genre.name,isActive, name, imageUrl, description})\n                .then(res=>{\n                    console.log(res.status)\n                    setOpen(false)\n                    setNotification(true, \"Genre edited\")\n                    setTimeout(()=>{\n                        window.location.reload(false);\n                    },(3000))\n\n                })\n                .catch(error=>{\n                    console.log(error)\n                    setOpen(false)\n                    setNotification(false, `${error.message}`)\n\n                })\n        }\n\n\n    }\n\n    const handleDelete = async (e)=>{\n        e.preventDefault()\n\n        await axios.delete(`/api/user/delete-genre/${genre.name}`)\n            .then(res=>{\n                console.log(res)\n                setOpen(false)\n                setNotification(true, \"Genre deleted\")\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(3000))\n\n            })\n            .catch(error=>{\n                console.log(error)\n                setOpen(false)\n                setNotification(false, `${error.message}`)\n\n            })\n    }\n\n\n\n\n\n    return (\n        <form>\n            <div className=\"space-y-12\">\n                <div className=\"border-b border-gray-900/10 pb-12\">\n                    <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\n                        {formType ?\n                            (\n                                'Add'\n                            )\n                            : (\n                                'Edit'\n                            )} Genre\n                    </h2>\n                    <p className=\"mt-1 text-sm leading-6 text-gray-600\">\n                        General information\n                    </p>\n\n\n                    <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                        <div className=\"sm:col-span-full\">\n                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Name\n                            </label>\n                            <div className=\"mt-2\">\n                                <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                    <input\n                                        onChange={(e)=>setName(e.target.value)}\n                                        type=\"text\"\n                                        name=\"name\"\n                                        id=\"name\"\n                                        autoComplete=\"name\"\n                                        className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                        value={name}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                        <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                            <div className=\"sm:col-span-full\">\n                                <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                    Image Url\n                                </label>\n                                <div className=\"mt-2\">\n                                    <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                        <input\n                                            onChange={(e)=>setImageUrl(e.target.value)}\n                                            type=\"text\"\n                                            name=\"name\"\n                                            id=\"name\"\n                                            autoComplete=\"name\"\n                                            className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                            value={imageUrl}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                                <div className=\"col-span-full\">\n                            <label htmlFor=\"about\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Description\n                            </label>\n                            <div className=\"mt-2\">\n                <textarea\n                    onChange={(e)=>setDescription(e.target.value)}\n                    id=\"about\"\n                    name=\"about\"\n                    rows={3}\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                    defaultValue={description}\n                />\n                            </div>\n\n                                    <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                                        <div className=\"sm:col-span-full\">\n                                            <Toggle title={\"Set active\"}   enabled={isActive} setEnabled={setIsActive} />\n                                        </div>\n                                    </div>\n                        </div>\n\n\n\n\n\n                    </div>\n                </div>\n\n\n\n\n            </div>\n\n            <div className=\"mt-6 flex items-center justify-end gap-x-6\">\n                <button onClick={()=>setOpen(false)} type=\"button\" className=\"text-sm font-semibold leading-6 text-gray-900\">\n                    Cancel\n                </button>\n\n                {!formType &&\n                    <button\n                        onClick={(e)=>handleDelete(e)}\n                        type=\"submit\"\n                        className=\"rounded-md w-24 bg-red-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                    >\n                        Delete\n                    </button>\n                }\n\n                <button\n                    onClick={(e)=>handleSubmit(e)}\n                    type=\"submit\"\n                    className=\"rounded-md w-24 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                >\n                    {formType ?\n                        (\n                            'Add'\n                        ):\n                        (\n                            'Edit'\n                        )}\n                </button>\n            </div>\n        </form>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/pages/dashboard/events/AddEventForm.jsx",["235","236","237","238"],[],"import React, {useEffect, useState} from 'react'\nimport { PhotoIcon, UserCircleIcon } from '@heroicons/react/24/solid'\nimport dayjs from \"dayjs\";\nimport {useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {setMessageOpen, setMessageTitle, setMessageType} from \"../../../state/MessageSlice\";\nimport {Toggle} from \"../../../components/buttons/Toggle\";\n\nexport const AddEventForm = ({setOpen, formType, event}) => {\n\n    const now = dayjs().format('YYYY-MM-DD')\n    const [name, setName] = useState('')\n    const [location, setLocation] = useState('')\n    const [date, setDate] = useState('')\n    const [time, setTime] = useState('')\n    const [isActive, setIsActive] = useState(true)\n    const [description, setDescription] = useState('')\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const setNotification = async (type, title) =>{\n\n        await dispatch(setMessageType(type))\n        await dispatch(setMessageTitle(title))\n        await dispatch(setMessageOpen(true, true))\n\n    }\n\n    useEffect(()=>{\n\n\n        if(formType === false){\n\n            setName(event.name)\n            setLocation(event.location)\n            setDate(event.date.slice(0,10))\n            setTime(event.date.slice(11,16))\n            setDescription(event.description)\n            setIsActive(event.isActive)\n\n\n        }\n\n    },[])\n\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n\n        const newDate = `${date}T${time}:00.000+00:00`\n\n\n        if(formType){\n\n\n            await axios.post('/api/user/add-event',{name,isActive, location, date: newDate, description})\n                .then(res=>{\n                    console.log(res.status)\n                    setOpen(false)\n                    setNotification(true, \"New event added\")\n\n                    setTimeout(()=>{\n                        window.location.reload(false);\n                    },(2000))\n\n                })\n                .catch(error=>{\n                    console.log(error)\n                    setOpen(false)\n                    setNotification(false, `${error.message}`)\n                })\n\n        }else{\n\n            await axios.patch('/api/user/edit-event',{id: event._id, name,isActive, location, date: newDate, description})\n                .then(res=>{\n                    console.log(res.status)\n                    setOpen(false)\n                    setNotification(true, \"Event edited\")\n\n                    setTimeout(()=>{\n                        window.location.reload(false);\n                    },(2000))\n\n                })\n                .catch(error=>{\n                    console.log(error)\n                    setOpen(false)\n                    setNotification(false, `${error.message}`)\n                })\n        }\n\n\n    }\n\n    const handleDelete = async (e)=>{\n        e.preventDefault()\n\n        await axios.delete(`/api/user/delete-event/${event._id}`)\n            .then(res=>{\n                setOpen(false)\n                setNotification(true, \"Event deleted\")\n\n                setTimeout(()=>{\n                    window.location.reload(false);\n                },(2000))\n            })\n            .catch(error=>{\n                console.log(error)\n                setOpen(false)\n                setNotification(false, `${error.message}`)\n            })\n    }\n\n\n\n\n    return (\n        <form>\n            <div className=\"space-y-12\">\n                <div className=\"border-b border-gray-900/10 pb-12\">\n                    <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\n                        {formType ?\n                            (\n                                'Add'\n                            )\n                            : (\n                                'Edit'\n                            )} Event\n                    </h2>\n                    <p className=\"mt-1 text-sm leading-6 text-gray-600\">\n                        General information\n                    </p>\n\n                    {!formType &&\n                        <>\n                        <div className=\"mt-6 flex items-center justify-center gap-x-6\">\n                            <button\n                                onClick={()=>navigate(`/event/${event._id}`)}\n                                type=\"submit\"\n                                className=\"rounded-md w-full bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                            >\n                                Go to event page\n                            </button>\n                        </div>\n                        <div className=\"mt-6 flex items-center justify-center gap-x-6\">\n                        <button\n                        onClick={()=>navigate(`/dashboard/live/${event._id}`)}\n                        type=\"submit\"\n                        className=\"rounded-md w-full bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                        >\n                        Show live statistics\n                        </button>\n                        </div>\n                        </>\n                    }\n\n\n\n                    <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                        <div className=\"sm:col-span-full\">\n                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Name\n                            </label>\n                            <div className=\"mt-2\">\n                                <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                    <input\n                                        onChange={(e)=>setName(e.target.value)}\n                                        type=\"text\"\n                                        name=\"name\"\n                                        id=\"name\"\n                                        autoComplete=\"name\"\n                                        className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                        value={name}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"sm:col-span-full\">\n                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Location\n                            </label>\n                            <div className=\"mt-2\">\n                                <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                    <input\n                                        onChange={(e)=>setLocation(e.target.value)}\n                                        type=\"text\"\n                                        name=\"location\"\n                                        id=\"location\"\n                                        autoComplete=\"name\"\n                                        className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                        value={location}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"sm:col-span-full\">\n                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Date\n                            </label>\n                            <div className=\"mt-2\">\n                                <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                    <input\n                                        onChange={(e)=>setDate(e.target.value)}\n                                        type=\"date\"\n                                        name=\"date\"\n                                        id=\"date\"\n                                        autoComplete=\"date\"\n                                        className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                        value={date}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"sm:col-span-full\">\n                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Time\n                            </label>\n                            <div className=\"mt-2\">\n                                <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-sky-400 sm:max-w-md\">\n\n                                    <input\n                                        onChange={(e)=>setTime(e.target.value)}\n                                        type=\"time\"\n                                        name=\"time\"\n                                        id=\"time\"\n                                        autoComplete=\"time\"\n                                        className=\"block  flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900  placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                                        value={time}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"col-span-full\">\n                            <label htmlFor=\"about\" className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                Description\n                            </label>\n                            <div className=\"mt-2\">\n                <textarea\n                    onChange={(e)=>setDescription(e.target.value)}\n                    id=\"about\"\n                    name=\"about\"\n                    rows={3}\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-sky-400 sm:text-sm sm:leading-6\"\n                    defaultValue={description}\n                />\n                            </div>\n\n                            <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                                <div className=\"sm:col-span-full\">\n                                    <Toggle title={\"Set active\"}   enabled={isActive} setEnabled={setIsActive} />\n                                </div>\n                            </div>\n                        </div>\n\n\n\n\n                    </div>\n                </div>\n\n\n\n\n            </div>\n\n            <div className=\"mt-6 flex items-center justify-end gap-x-6\">\n                <button onClick={()=>setOpen(false)} type=\"button\" className=\"text-sm font-semibold leading-6 text-gray-900\">\n                    Cancel\n                </button>\n\n                {!formType &&\n                    <button\n                        onClick={(e)=>handleDelete(e)}\n                        type=\"submit\"\n                        className=\"rounded-md w-24 bg-red-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                    >\n                        Delete\n                    </button>\n                }\n\n                <button\n                    onClick={(e)=>handleSubmit(e)}\n                    type=\"submit\"\n                    className=\"rounded-md w-24 bg-sky-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400\"\n                >\n                    {formType ?\n                        (\n                          'Add'\n                        ):\n                        (\n                            'Edit'\n                        )}\n                </button>\n            </div>\n        </form>\n    )\n}\n","/Users/roymalka/Library/Mobile Documents/com~apple~CloudDocs/Study/Live Projects/StatMix/client/src/components/buttons/Toggle.jsx",[],[],{"ruleId":"239","severity":1,"message":"240","line":11,"column":9,"nodeType":"241","messageId":"242","endLine":11,"endColumn":19},{"ruleId":"239","severity":1,"message":"243","line":13,"column":21,"nodeType":"241","messageId":"242","endLine":13,"endColumn":30},{"ruleId":"244","severity":1,"message":"245","line":28,"column":8,"nodeType":"246","endLine":28,"endColumn":10,"suggestions":"247"},{"ruleId":"239","severity":1,"message":"248","line":1,"column":28,"nodeType":"241","messageId":"242","endLine":1,"endColumn":37},{"ruleId":"239","severity":1,"message":"249","line":7,"column":22,"nodeType":"241","messageId":"242","endLine":7,"endColumn":41},{"ruleId":"239","severity":1,"message":"250","line":22,"column":22,"nodeType":"241","messageId":"242","endLine":22,"endColumn":33},{"ruleId":"239","severity":1,"message":"251","line":23,"column":12,"nodeType":"241","messageId":"242","endLine":23,"endColumn":19},{"ruleId":"239","severity":1,"message":"243","line":23,"column":21,"nodeType":"241","messageId":"242","endLine":23,"endColumn":30},{"ruleId":"239","severity":1,"message":"252","line":3,"column":10,"nodeType":"241","messageId":"242","endLine":3,"endColumn":20},{"ruleId":"239","severity":1,"message":"253","line":3,"column":22,"nodeType":"241","messageId":"242","endLine":3,"endColumn":26},{"ruleId":"239","severity":1,"message":"254","line":3,"column":28,"nodeType":"241","messageId":"242","endLine":3,"endColumn":38},{"ruleId":"239","severity":1,"message":"243","line":19,"column":21,"nodeType":"241","messageId":"242","endLine":19,"endColumn":30},{"ruleId":"244","severity":1,"message":"255","line":68,"column":7,"nodeType":"246","endLine":68,"endColumn":9,"suggestions":"256"},{"ruleId":"257","severity":1,"message":"258","line":129,"column":57,"nodeType":"259","endLine":132,"endColumn":58},{"ruleId":"260","severity":1,"message":"261","line":134,"column":65,"nodeType":"259","endLine":135,"endColumn":200},{"ruleId":"239","severity":1,"message":"248","line":1,"column":38,"nodeType":"241","messageId":"242","endLine":1,"endColumn":47},{"ruleId":"239","severity":1,"message":"262","line":2,"column":9,"nodeType":"241","messageId":"242","endLine":2,"endColumn":16},{"ruleId":"239","severity":1,"message":"263","line":3,"column":9,"nodeType":"241","messageId":"242","endLine":3,"endColumn":28},{"ruleId":"239","severity":1,"message":"253","line":4,"column":9,"nodeType":"241","messageId":"242","endLine":4,"endColumn":13},{"ruleId":"239","severity":1,"message":"254","line":4,"column":15,"nodeType":"241","messageId":"242","endLine":4,"endColumn":25},{"ruleId":"239","severity":1,"message":"264","line":12,"column":8,"nodeType":"241","messageId":"242","endLine":12,"endColumn":13},{"ruleId":"239","severity":1,"message":"243","line":46,"column":21,"nodeType":"241","messageId":"242","endLine":46,"endColumn":30},{"ruleId":"239","severity":1,"message":"265","line":1,"column":39,"nodeType":"241","messageId":"242","endLine":1,"endColumn":45},{"ruleId":"239","severity":1,"message":"266","line":1,"column":47,"nodeType":"241","messageId":"242","endLine":1,"endColumn":55},{"ruleId":"244","severity":1,"message":"267","line":32,"column":7,"nodeType":"246","endLine":32,"endColumn":9,"suggestions":"268"},{"ruleId":"239","severity":1,"message":"248","line":1,"column":16,"nodeType":"241","messageId":"242","endLine":1,"endColumn":25},{"ruleId":"239","severity":1,"message":"266","line":1,"column":36,"nodeType":"241","messageId":"242","endLine":1,"endColumn":44},{"ruleId":"239","severity":1,"message":"269","line":5,"column":9,"nodeType":"241","messageId":"242","endLine":5,"endColumn":20},{"ruleId":"239","severity":1,"message":"270","line":6,"column":16,"nodeType":"241","messageId":"242","endLine":6,"endColumn":21},{"ruleId":"244","severity":1,"message":"271","line":46,"column":20,"nodeType":"241","endLine":46,"endColumn":27},{"ruleId":"239","severity":1,"message":"272","line":2,"column":9,"nodeType":"241","messageId":"242","endLine":2,"endColumn":17},{"ruleId":"260","severity":1,"message":"261","line":150,"column":65,"nodeType":"259","endLine":151,"endColumn":127},{"ruleId":"239","severity":1,"message":"273","line":1,"column":27,"nodeType":"241","messageId":"242","endLine":1,"endColumn":34},{"ruleId":"239","severity":1,"message":"274","line":3,"column":9,"nodeType":"241","messageId":"242","endLine":3,"endColumn":20},{"ruleId":"239","severity":1,"message":"275","line":50,"column":21,"nodeType":"241","messageId":"242","endLine":50,"endColumn":31},{"ruleId":"244","severity":1,"message":"276","line":89,"column":7,"nodeType":"246","endLine":89,"endColumn":18,"suggestions":"277"},{"ruleId":"260","severity":1,"message":"261","line":160,"column":61,"nodeType":"259","endLine":161,"endColumn":123},{"ruleId":"260","severity":1,"message":"261","line":168,"column":65,"nodeType":"259","endLine":169,"endColumn":131},{"ruleId":"260","severity":1,"message":"261","line":177,"column":53,"nodeType":"259","endLine":178,"endColumn":115},{"ruleId":"239","severity":1,"message":"278","line":2,"column":20,"nodeType":"241","messageId":"242","endLine":2,"endColumn":33},{"ruleId":"239","severity":1,"message":"279","line":5,"column":9,"nodeType":"241","messageId":"242","endLine":5,"endColumn":20},{"ruleId":"239","severity":1,"message":"273","line":1,"column":27,"nodeType":"241","messageId":"242","endLine":1,"endColumn":34},{"ruleId":"239","severity":1,"message":"265","line":1,"column":36,"nodeType":"241","messageId":"242","endLine":1,"endColumn":42},{"ruleId":"239","severity":1,"message":"280","line":90,"column":19,"nodeType":"241","messageId":"242","endLine":90,"endColumn":22},{"ruleId":"244","severity":1,"message":"281","line":115,"column":7,"nodeType":"246","endLine":115,"endColumn":21,"suggestions":"282"},{"ruleId":"260","severity":1,"message":"261","line":268,"column":61,"nodeType":"259","endLine":272,"endColumn":103},{"ruleId":"260","severity":1,"message":"261","line":372,"column":45,"nodeType":"259","endLine":378,"endColumn":46},{"ruleId":"239","severity":1,"message":"283","line":4,"column":9,"nodeType":"241","messageId":"242","endLine":4,"endColumn":18},{"ruleId":"239","severity":1,"message":"266","line":5,"column":9,"nodeType":"241","messageId":"242","endLine":5,"endColumn":17},{"ruleId":"239","severity":1,"message":"284","line":14,"column":11,"nodeType":"241","messageId":"242","endLine":14,"endColumn":16},{"ruleId":"239","severity":1,"message":"285","line":4,"column":10,"nodeType":"241","messageId":"242","endLine":4,"endColumn":30},{"ruleId":"260","severity":1,"message":"261","line":40,"column":37,"nodeType":"259","endLine":47,"endColumn":38},{"ruleId":"239","severity":1,"message":"286","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":19},{"ruleId":"239","severity":1,"message":"287","line":2,"column":21,"nodeType":"241","messageId":"242","endLine":2,"endColumn":35},{"ruleId":"239","severity":1,"message":"288","line":3,"column":8,"nodeType":"241","messageId":"242","endLine":3,"endColumn":13},{"ruleId":"239","severity":1,"message":"274","line":4,"column":9,"nodeType":"241","messageId":"242","endLine":4,"endColumn":20},{"ruleId":"239","severity":1,"message":"279","line":7,"column":22,"nodeType":"241","messageId":"242","endLine":7,"endColumn":33},{"ruleId":"244","severity":1,"message":"289","line":42,"column":7,"nodeType":"246","endLine":42,"endColumn":9,"suggestions":"290"},{"ruleId":"239","severity":1,"message":"286","line":2,"column":10,"nodeType":"241","messageId":"242","endLine":2,"endColumn":19},{"ruleId":"239","severity":1,"message":"287","line":2,"column":21,"nodeType":"241","messageId":"242","endLine":2,"endColumn":35},{"ruleId":"239","severity":1,"message":"291","line":12,"column":11,"nodeType":"241","messageId":"242","endLine":12,"endColumn":14},{"ruleId":"244","severity":1,"message":"292","line":45,"column":7,"nodeType":"246","endLine":45,"endColumn":9,"suggestions":"293"},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'setCookie' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies.token' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["294"],"'useEffect' is defined but never used.","'UserContextProvider' is defined but never used.","'setImageUrl' is assigned a value but never used.","'cookies' is assigned a value but never used.","'Disclosure' is defined but never used.","'Menu' is defined but never used.","'Transition' is defined but never used.","React Hook useEffect has a missing dependency: 'getEvent'. Either include it or remove the dependency array.",["295"],"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'CogIcon' is defined but never used.","'MagnifyingGlassIcon' is defined but never used.","'axios' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'handleSignout' and 'navigate'. Either include them or remove the dependency array.",["296"],"'SideOverlay' is defined but never used.","'Dayjs' is defined but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'Dropdown' is defined but never used.","'useMemo' is defined but never used.","'useNavigate' is defined but never used.","'setOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eventId' and 'options.data'. Either include them or remove the dependency array.",["297"],"'PlusSmallIcon' is defined but never used.","'useSelector' is defined but never used.","'day' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'renderDays'. Either include it or remove the dependency array.",["298"],"'CheckIcon' is defined but never used.","'state' is assigned a value but never used.","'EllipsisVerticalIcon' is defined but never used.","'PhotoIcon' is defined but never used.","'UserCircleIcon' is defined but never used.","'dayjs' is defined but never used.","React Hook useEffect has missing dependencies: 'formType', 'genre.description', 'genre.imageUrl', 'genre.isActive', and 'genre.name'. Either include them or remove the dependency array. If 'setName' needs the current value of 'genre.name', you can also switch to useReducer instead of useState and read 'genre.name' in the reducer.",["299"],"'now' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'event.date', 'event.description', 'event.isActive', 'event.location', 'event.name', and 'formType'. Either include them or remove the dependency array. If 'setName' needs the current value of 'event.name', you can also switch to useReducer instead of useState and read 'event.name' in the reducer.",["300"],{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},"Update the dependencies array to be: [cookies.token, user]",{"range":"315","text":"316"},"Update the dependencies array to be: [getEvent]",{"range":"317","text":"318"},"Update the dependencies array to be: [handleSignout, navigate]",{"range":"319","text":"320"},"Update the dependencies array to be: [chartType, eventId, options.data]",{"range":"321","text":"322"},"Update the dependencies array to be: [currentMonth, renderDays]",{"range":"323","text":"324"},"Update the dependencies array to be: [formType, genre.description, genre.imageUrl, genre.isActive, genre.name]",{"range":"325","text":"326"},"Update the dependencies array to be: [event.date, event.description, event.isActive, event.location, event.name, formType]",{"range":"327","text":"328"},[790,792],"[cookies.token, user]",[1562,1564],"[getEvent]",[666,668],"[handleSignout, navigate]",[2170,2181],"[chartType, eventId, options.data]",[2998,3012],"[currentMonth, renderDays]",[1160,1162],"[formType, genre.description, genre.imageUrl, genre.isActive, genre.name]",[1395,1397],"[event.date, event.description, event.isActive, event.location, event.name, formType]"]